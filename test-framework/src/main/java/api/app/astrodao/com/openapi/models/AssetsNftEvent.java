/*
 * Sputnik v2 API
 * Sputnik v2 API Backend Server
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.app.astrodao.com.openapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AssetsNftEvent
 */
@JsonPropertyOrder({
  AssetsNftEvent.JSON_PROPERTY_EMITTED_FOR_RECEIPT_ID,
  AssetsNftEvent.JSON_PROPERTY_EMITTED_AT_BLOCK_TIMESTAMP,
  AssetsNftEvent.JSON_PROPERTY_EMITTED_IN_SHARD_ID,
  AssetsNftEvent.JSON_PROPERTY_EMITTED_INDEX_OF_EVENT_ENTRY_IN_SHARD,
  AssetsNftEvent.JSON_PROPERTY_EMITTED_BY_CONTRACT_ACCOUNT_ID,
  AssetsNftEvent.JSON_PROPERTY_TOKEN_ID,
  AssetsNftEvent.JSON_PROPERTY_EVENT_KIND,
  AssetsNftEvent.JSON_PROPERTY_TOKEN_OLD_OWNER_ACCOUNT_ID,
  AssetsNftEvent.JSON_PROPERTY_TOKEN_NEW_OWNER_ACCOUNT_ID,
  AssetsNftEvent.JSON_PROPERTY_TOKEN_AUTHORIZED_ACCOUNT_ID,
  AssetsNftEvent.JSON_PROPERTY_EVENT_MEMO
})
@JsonTypeName("AssetsNftEvent")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-23T12:57:16.263593+02:00[Europe/Kiev]")
public class AssetsNftEvent {
  public static final String JSON_PROPERTY_EMITTED_FOR_RECEIPT_ID = "emittedForReceiptId";
  private String emittedForReceiptId;

  public static final String JSON_PROPERTY_EMITTED_AT_BLOCK_TIMESTAMP = "emittedAtBlockTimestamp";
  private BigDecimal emittedAtBlockTimestamp;

  public static final String JSON_PROPERTY_EMITTED_IN_SHARD_ID = "emittedInShardId";
  private BigDecimal emittedInShardId;

  public static final String JSON_PROPERTY_EMITTED_INDEX_OF_EVENT_ENTRY_IN_SHARD = "emittedIndexOfEventEntryInShard";
  private BigDecimal emittedIndexOfEventEntryInShard;

  public static final String JSON_PROPERTY_EMITTED_BY_CONTRACT_ACCOUNT_ID = "emittedByContractAccountId";
  private String emittedByContractAccountId;

  public static final String JSON_PROPERTY_TOKEN_ID = "tokenId";
  private String tokenId;

  public static final String JSON_PROPERTY_EVENT_KIND = "eventKind";
  private String eventKind;

  public static final String JSON_PROPERTY_TOKEN_OLD_OWNER_ACCOUNT_ID = "tokenOldOwnerAccountId";
  private String tokenOldOwnerAccountId;

  public static final String JSON_PROPERTY_TOKEN_NEW_OWNER_ACCOUNT_ID = "tokenNewOwnerAccountId";
  private String tokenNewOwnerAccountId;

  public static final String JSON_PROPERTY_TOKEN_AUTHORIZED_ACCOUNT_ID = "tokenAuthorizedAccountId";
  private String tokenAuthorizedAccountId;

  public static final String JSON_PROPERTY_EVENT_MEMO = "eventMemo";
  private String eventMemo;

  public AssetsNftEvent() { 
  }

  public AssetsNftEvent emittedForReceiptId(String emittedForReceiptId) {
    
    this.emittedForReceiptId = emittedForReceiptId;
    return this;
  }

   /**
   * Get emittedForReceiptId
   * @return emittedForReceiptId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EMITTED_FOR_RECEIPT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmittedForReceiptId() {
    return emittedForReceiptId;
  }


  @JsonProperty(JSON_PROPERTY_EMITTED_FOR_RECEIPT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmittedForReceiptId(String emittedForReceiptId) {
    this.emittedForReceiptId = emittedForReceiptId;
  }


  public AssetsNftEvent emittedAtBlockTimestamp(BigDecimal emittedAtBlockTimestamp) {
    
    this.emittedAtBlockTimestamp = emittedAtBlockTimestamp;
    return this;
  }

   /**
   * Get emittedAtBlockTimestamp
   * @return emittedAtBlockTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EMITTED_AT_BLOCK_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getEmittedAtBlockTimestamp() {
    return emittedAtBlockTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_EMITTED_AT_BLOCK_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmittedAtBlockTimestamp(BigDecimal emittedAtBlockTimestamp) {
    this.emittedAtBlockTimestamp = emittedAtBlockTimestamp;
  }


  public AssetsNftEvent emittedInShardId(BigDecimal emittedInShardId) {
    
    this.emittedInShardId = emittedInShardId;
    return this;
  }

   /**
   * Get emittedInShardId
   * @return emittedInShardId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EMITTED_IN_SHARD_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getEmittedInShardId() {
    return emittedInShardId;
  }


  @JsonProperty(JSON_PROPERTY_EMITTED_IN_SHARD_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmittedInShardId(BigDecimal emittedInShardId) {
    this.emittedInShardId = emittedInShardId;
  }


  public AssetsNftEvent emittedIndexOfEventEntryInShard(BigDecimal emittedIndexOfEventEntryInShard) {
    
    this.emittedIndexOfEventEntryInShard = emittedIndexOfEventEntryInShard;
    return this;
  }

   /**
   * Get emittedIndexOfEventEntryInShard
   * @return emittedIndexOfEventEntryInShard
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EMITTED_INDEX_OF_EVENT_ENTRY_IN_SHARD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getEmittedIndexOfEventEntryInShard() {
    return emittedIndexOfEventEntryInShard;
  }


  @JsonProperty(JSON_PROPERTY_EMITTED_INDEX_OF_EVENT_ENTRY_IN_SHARD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmittedIndexOfEventEntryInShard(BigDecimal emittedIndexOfEventEntryInShard) {
    this.emittedIndexOfEventEntryInShard = emittedIndexOfEventEntryInShard;
  }


  public AssetsNftEvent emittedByContractAccountId(String emittedByContractAccountId) {
    
    this.emittedByContractAccountId = emittedByContractAccountId;
    return this;
  }

   /**
   * Get emittedByContractAccountId
   * @return emittedByContractAccountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EMITTED_BY_CONTRACT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmittedByContractAccountId() {
    return emittedByContractAccountId;
  }


  @JsonProperty(JSON_PROPERTY_EMITTED_BY_CONTRACT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmittedByContractAccountId(String emittedByContractAccountId) {
    this.emittedByContractAccountId = emittedByContractAccountId;
  }


  public AssetsNftEvent tokenId(String tokenId) {
    
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Get tokenId
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTokenId() {
    return tokenId;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public AssetsNftEvent eventKind(String eventKind) {
    
    this.eventKind = eventKind;
    return this;
  }

   /**
   * Get eventKind
   * @return eventKind
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EVENT_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEventKind() {
    return eventKind;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventKind(String eventKind) {
    this.eventKind = eventKind;
  }


  public AssetsNftEvent tokenOldOwnerAccountId(String tokenOldOwnerAccountId) {
    
    this.tokenOldOwnerAccountId = tokenOldOwnerAccountId;
    return this;
  }

   /**
   * Get tokenOldOwnerAccountId
   * @return tokenOldOwnerAccountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_OLD_OWNER_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTokenOldOwnerAccountId() {
    return tokenOldOwnerAccountId;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_OLD_OWNER_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenOldOwnerAccountId(String tokenOldOwnerAccountId) {
    this.tokenOldOwnerAccountId = tokenOldOwnerAccountId;
  }


  public AssetsNftEvent tokenNewOwnerAccountId(String tokenNewOwnerAccountId) {
    
    this.tokenNewOwnerAccountId = tokenNewOwnerAccountId;
    return this;
  }

   /**
   * Get tokenNewOwnerAccountId
   * @return tokenNewOwnerAccountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_NEW_OWNER_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTokenNewOwnerAccountId() {
    return tokenNewOwnerAccountId;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_NEW_OWNER_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenNewOwnerAccountId(String tokenNewOwnerAccountId) {
    this.tokenNewOwnerAccountId = tokenNewOwnerAccountId;
  }


  public AssetsNftEvent tokenAuthorizedAccountId(String tokenAuthorizedAccountId) {
    
    this.tokenAuthorizedAccountId = tokenAuthorizedAccountId;
    return this;
  }

   /**
   * Get tokenAuthorizedAccountId
   * @return tokenAuthorizedAccountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_AUTHORIZED_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTokenAuthorizedAccountId() {
    return tokenAuthorizedAccountId;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_AUTHORIZED_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenAuthorizedAccountId(String tokenAuthorizedAccountId) {
    this.tokenAuthorizedAccountId = tokenAuthorizedAccountId;
  }


  public AssetsNftEvent eventMemo(String eventMemo) {
    
    this.eventMemo = eventMemo;
    return this;
  }

   /**
   * Get eventMemo
   * @return eventMemo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EVENT_MEMO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEventMemo() {
    return eventMemo;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_MEMO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventMemo(String eventMemo) {
    this.eventMemo = eventMemo;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetsNftEvent assetsNftEvent = (AssetsNftEvent) o;
    return Objects.equals(this.emittedForReceiptId, assetsNftEvent.emittedForReceiptId) &&
        Objects.equals(this.emittedAtBlockTimestamp, assetsNftEvent.emittedAtBlockTimestamp) &&
        Objects.equals(this.emittedInShardId, assetsNftEvent.emittedInShardId) &&
        Objects.equals(this.emittedIndexOfEventEntryInShard, assetsNftEvent.emittedIndexOfEventEntryInShard) &&
        Objects.equals(this.emittedByContractAccountId, assetsNftEvent.emittedByContractAccountId) &&
        Objects.equals(this.tokenId, assetsNftEvent.tokenId) &&
        Objects.equals(this.eventKind, assetsNftEvent.eventKind) &&
        Objects.equals(this.tokenOldOwnerAccountId, assetsNftEvent.tokenOldOwnerAccountId) &&
        Objects.equals(this.tokenNewOwnerAccountId, assetsNftEvent.tokenNewOwnerAccountId) &&
        Objects.equals(this.tokenAuthorizedAccountId, assetsNftEvent.tokenAuthorizedAccountId) &&
        Objects.equals(this.eventMemo, assetsNftEvent.eventMemo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emittedForReceiptId, emittedAtBlockTimestamp, emittedInShardId, emittedIndexOfEventEntryInShard, emittedByContractAccountId, tokenId, eventKind, tokenOldOwnerAccountId, tokenNewOwnerAccountId, tokenAuthorizedAccountId, eventMemo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetsNftEvent {\n");
    sb.append("    emittedForReceiptId: ").append(toIndentedString(emittedForReceiptId)).append("\n");
    sb.append("    emittedAtBlockTimestamp: ").append(toIndentedString(emittedAtBlockTimestamp)).append("\n");
    sb.append("    emittedInShardId: ").append(toIndentedString(emittedInShardId)).append("\n");
    sb.append("    emittedIndexOfEventEntryInShard: ").append(toIndentedString(emittedIndexOfEventEntryInShard)).append("\n");
    sb.append("    emittedByContractAccountId: ").append(toIndentedString(emittedByContractAccountId)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    eventKind: ").append(toIndentedString(eventKind)).append("\n");
    sb.append("    tokenOldOwnerAccountId: ").append(toIndentedString(tokenOldOwnerAccountId)).append("\n");
    sb.append("    tokenNewOwnerAccountId: ").append(toIndentedString(tokenNewOwnerAccountId)).append("\n");
    sb.append("    tokenAuthorizedAccountId: ").append(toIndentedString(tokenAuthorizedAccountId)).append("\n");
    sb.append("    eventMemo: ").append(toIndentedString(eventMemo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

