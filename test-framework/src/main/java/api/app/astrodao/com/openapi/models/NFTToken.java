/*
 * Sputnik v2 API
 * Sputnik v2 API Backend Server
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.app.astrodao.com.openapi.models;

import java.util.Objects;
import java.util.Arrays;
import api.app.astrodao.com.openapi.models.NFTContract;
import api.app.astrodao.com.openapi.models.NFTTokenMetadata;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * NFTToken
 */
@JsonPropertyOrder({
  NFTToken.JSON_PROPERTY_TRANSACTION_HASH,
  NFTToken.JSON_PROPERTY_UPDATE_TRANSACTION_HASH,
  NFTToken.JSON_PROPERTY_CREATE_TIMESTAMP,
  NFTToken.JSON_PROPERTY_UPDATE_TIMESTAMP,
  NFTToken.JSON_PROPERTY_ID,
  NFTToken.JSON_PROPERTY_OWNER_ID,
  NFTToken.JSON_PROPERTY_TOKEN_ID,
  NFTToken.JSON_PROPERTY_ACCOUNT_ID,
  NFTToken.JSON_PROPERTY_MINTER,
  NFTToken.JSON_PROPERTY_CONTRACT_ID,
  NFTToken.JSON_PROPERTY_CONTRACT,
  NFTToken.JSON_PROPERTY_METADATA
})
@JsonTypeName("NFTToken")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-23T12:57:16.263593+02:00[Europe/Kiev]")
public class NFTToken {
  public static final String JSON_PROPERTY_TRANSACTION_HASH = "transactionHash";
  private String transactionHash;

  public static final String JSON_PROPERTY_UPDATE_TRANSACTION_HASH = "updateTransactionHash";
  private String updateTransactionHash;

  public static final String JSON_PROPERTY_CREATE_TIMESTAMP = "createTimestamp";
  private BigDecimal createTimestamp;

  public static final String JSON_PROPERTY_UPDATE_TIMESTAMP = "updateTimestamp";
  private BigDecimal updateTimestamp;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_OWNER_ID = "ownerId";
  private String ownerId;

  public static final String JSON_PROPERTY_TOKEN_ID = "tokenId";
  private String tokenId;

  public static final String JSON_PROPERTY_ACCOUNT_ID = "accountId";
  private String accountId;

  public static final String JSON_PROPERTY_MINTER = "minter";
  private String minter;

  public static final String JSON_PROPERTY_CONTRACT_ID = "contractId";
  private String contractId;

  public static final String JSON_PROPERTY_CONTRACT = "contract";
  private NFTContract contract;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private NFTTokenMetadata metadata;

  public NFTToken() { 
  }

  public NFTToken transactionHash(String transactionHash) {
    
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Get transactionHash
   * @return transactionHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionHash() {
    return transactionHash;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public NFTToken updateTransactionHash(String updateTransactionHash) {
    
    this.updateTransactionHash = updateTransactionHash;
    return this;
  }

   /**
   * Get updateTransactionHash
   * @return updateTransactionHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UPDATE_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUpdateTransactionHash() {
    return updateTransactionHash;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdateTransactionHash(String updateTransactionHash) {
    this.updateTransactionHash = updateTransactionHash;
  }


  public NFTToken createTimestamp(BigDecimal createTimestamp) {
    
    this.createTimestamp = createTimestamp;
    return this;
  }

   /**
   * Get createTimestamp
   * @return createTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CREATE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getCreateTimestamp() {
    return createTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreateTimestamp(BigDecimal createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public NFTToken updateTimestamp(BigDecimal updateTimestamp) {
    
    this.updateTimestamp = updateTimestamp;
    return this;
  }

   /**
   * Get updateTimestamp
   * @return updateTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UPDATE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getUpdateTimestamp() {
    return updateTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdateTimestamp(BigDecimal updateTimestamp) {
    this.updateTimestamp = updateTimestamp;
  }


  public NFTToken id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public NFTToken ownerId(String ownerId) {
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * Get ownerId
   * @return ownerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOwnerId() {
    return ownerId;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public NFTToken tokenId(String tokenId) {
    
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Get tokenId
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTokenId() {
    return tokenId;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public NFTToken accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public NFTToken minter(String minter) {
    
    this.minter = minter;
    return this;
  }

   /**
   * Get minter
   * @return minter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MINTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMinter() {
    return minter;
  }


  @JsonProperty(JSON_PROPERTY_MINTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinter(String minter) {
    this.minter = minter;
  }


  public NFTToken contractId(String contractId) {
    
    this.contractId = contractId;
    return this;
  }

   /**
   * Get contractId
   * @return contractId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONTRACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContractId() {
    return contractId;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContractId(String contractId) {
    this.contractId = contractId;
  }


  public NFTToken contract(NFTContract contract) {
    
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONTRACT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NFTContract getContract() {
    return contract;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContract(NFTContract contract) {
    this.contract = contract;
  }


  public NFTToken metadata(NFTTokenMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NFTTokenMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(NFTTokenMetadata metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NFTToken nfTToken = (NFTToken) o;
    return Objects.equals(this.transactionHash, nfTToken.transactionHash) &&
        Objects.equals(this.updateTransactionHash, nfTToken.updateTransactionHash) &&
        Objects.equals(this.createTimestamp, nfTToken.createTimestamp) &&
        Objects.equals(this.updateTimestamp, nfTToken.updateTimestamp) &&
        Objects.equals(this.id, nfTToken.id) &&
        Objects.equals(this.ownerId, nfTToken.ownerId) &&
        Objects.equals(this.tokenId, nfTToken.tokenId) &&
        Objects.equals(this.accountId, nfTToken.accountId) &&
        Objects.equals(this.minter, nfTToken.minter) &&
        Objects.equals(this.contractId, nfTToken.contractId) &&
        Objects.equals(this.contract, nfTToken.contract) &&
        Objects.equals(this.metadata, nfTToken.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionHash, updateTransactionHash, createTimestamp, updateTimestamp, id, ownerId, tokenId, accountId, minter, contractId, contract, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NFTToken {\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    updateTransactionHash: ").append(toIndentedString(updateTransactionHash)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    updateTimestamp: ").append(toIndentedString(updateTimestamp)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    minter: ").append(toIndentedString(minter)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

