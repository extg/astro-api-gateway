buildscript {
    ext {
        aspectjVersion = '1.9.4'
        springVersion = '5.3.5'
        lombokVersion = '1.18.8'
        allureVersion = '2.16.1'
        selenideVersion = '5.20.0'
        junitVersion = '5.8.1'
        commonsVersion = '3.12.0'
        snakeyamlVersion = '1.28'
        slf4jVersion = '1.7.30'
        assertjVersion = '3.19.0'
        okhttpVersion = '4.9.1'
        jacksonVersion = '2.12.3'
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
    id 'io.freefair.lombok' version '5.3.3.3'
    id "de.undercouch.download" version "4.1.2"
}

version '1.0'
group = 'api.app.astrodao.com'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.aspectj:aspectjweaver:${aspectjVersion}"
    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-web:${springVersion}"
    implementation "org.springframework:spring-test:${springVersion}"
    implementation "org.springframework:spring-aop:${springVersion}"
    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsVersion}"
    implementation "org.assertj:assertj-core:${assertjVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttpVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.google.code.gson:gson:2.8.9"
    implementation "org.awaitility:awaitility:4.1.1"

    implementation "io.qameta.allure:allure-java-commons:${allureVersion}"
    implementation "io.qameta.allure:allure-spring-web:${allureVersion}"

    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "com.github.javafaker:javafaker:1.0.2"
    implementation "org.javatuples:javatuples:1.2"

    implementation "com.github.viclovsky:swagger-coverage-commons:1.4.4"
    implementation "io.swagger.core.v3:swagger-models:2.1.11"
    implementation "io.swagger:swagger-models:1.6.3"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

allure {
    version = "${allureVersion}"
    autoconfigure = true
    aspectjweaver = true
    useJUnit5 {
        version = "${allureVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform {
        includeTags System.getProperty("includeTags", "all")
    }

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }

    environment "TEST_ENV", System.getProperty("test.env", "testnet")
}

task downloadSwaggerSpec(type: Download) {
    src "https://api.${System.getProperty("test.env", "testnet")}.app.astrodao.com/docs-json"
    dest new File("${buildDir}/spec.json")
}

task downloadCliForCoverage(type: Download) {
    src "https://github.com/viclovsky/swagger-coverage/releases/download/1.4.4/swagger-coverage-1.4.4.zip"
    dest new File("${buildDir}/swagger-coverage-commandline.zip")
}

task unzipCoverageCli(type: Copy) {
    def zipFile = file("${buildDir}/swagger-coverage-commandline.zip")
    def outputDir = file(buildDir)

    from zipTree(zipFile)
    into outputDir

    doLast {
        project.logger.lifecycle('Swagger-coverage-commandline zip file was unpacked')
    }
}

task generateCoverage(type: Exec) {
    workingDir "${buildDir}/swagger-coverage-commandline-1.4.4/bin"

    commandLine "./swagger-coverage-commandline", "-s", "../../spec.json", "-i", "../../swagger-coverage-output"
}

unzipCoverageCli {
    dependsOn tasks.named("downloadCliForCoverage"), tasks.named("downloadSwaggerSpec")
}

generateCoverage {
    dependsOn tasks.named("unzipCoverageCli")
}
